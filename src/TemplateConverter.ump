namespace cruise.umple.fromjet;

use BlockParsers.ump;
use Constants.ump;
use DirectiveParser.ump;
use Elements.ump;
use FileGenerators.ump;
use SkeletonGenerator.ump;

class TemplateConverter {
    depend java.nio.file.Path;
    depend java.io.*;
    depend javafx.util.Pair;
    
    
    lazy internal DirectiveParser directive;
    lazy internal SkeletonGenerator skeletonGenerator;
    
    // Directory the template is stored in
    internal Path templatePath;
    internal templateName;
    internal TemplateElement[] elements;
    boolean isMainTemplate;
    
    // Templates that it depends on
    internal HashSet<String> allDependencies = new HashSet<>();
    
    public boolean convert() {
        elements.clear();
        try (BufferedReader br = new BufferedReader(new FileReader(templatePath.toString()))) {
        
            // Work around for Umple templates issue with comments containing the end of template
            // Could add this if the need arises, but adding it also makes debugging easier
            elements.add(new BasicElement(UmpleTemplateConstants.CommentBlockStart + templateName + UmpleTemplateConstants.CommentBlockEnd));
        
            return parse(br);
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
    }
    
    public void save(Path saveTo, String templateName, String mainClassToStore) throws FileNotFoundException{
        try (PrintWriter out = new PrintWriter(saveTo.toString())) {
            FileGenerators generator = new FileGenerators();
            
            List<String> dependencies = new ArrayList<String>(allDependencies);
            Collections.sort(dependencies);
            
            String className = (isMainTemplate) ? directive.getGeneratedClass() : mainClassToStore;
            out.write(generator.generateClassFileDependencies(dependencies));
            
            if (isMainTemplate) {
                // Add package if it has one
                String directivePackage = directive.getDirectivePackage();
                if (directivePackage.length() > 0) {
                    out.write(generator.generateClassPackage(directivePackage));
                }
                
                out.write(skeletonGenerator.getPreClassDefinitionSkeleton());
            }
            
            out.write(generator.generateTemplateClassAndImports(directive, className));
            
            if (isMainTemplate) {
                out.write(skeletonGenerator.getPostClassDefinitionSkeleton());
                out.write(generator.generateEmitStatement(templateName, skeletonGenerator.getHasSpecializedSkeleton()));
            }
            
            out.write(generator.generateRestOfTemplate(templateName, getTemplateText(mainClassToStore)));
        }
    }
    
    public String getTemplateText(String mainClassToStore) {
        StringBuilder sb = new StringBuilder();
        sb.append(UmpleTemplateConstants.TemplateStart);
        for (TemplateElement element : elements) {
            sb.append(element.getAsString(mainClassToStore));
        }
        sb.append(UmpleTemplateConstants.TemplateEnd);
        return sb.toString();
    }
    
    private boolean parse(BufferedReader bufferedReader) throws IOException {
        String rest = bufferedReader.readLine();
        
        directive = new DirectiveParser(rest);
        if (!directive.getIsValid()) {
            return false;
        }
        
        if (isMainTemplate) {
            // No need to parse the skeleton if it isn't a main template
            // Since it is currently only used if it is a main template
            skeletonGenerator = new SkeletonGenerator(templatePath.getParent(), directive.getSkeleton());
        }
        
        rest = rest.substring(rest.indexOf(JETConstants.DirectiveEnd) + JETConstants.DirectiveEnd.length());
        
        // If the first line is just for the jet directive, will parse it specially
        if (rest.equals("")) {
            rest = bufferedReader.readLine();
            
            // Template was just a directive, and will be blank otherwise.
            // Still a valid template
            if (rest == null) {
                return true;
            }
            
            // If the first line starts with spaces followed immediately by a Code or Directive Operation
            // Must remove the spaces and newline leading into the Operation
            // Otherwise, the newline should be kept
            boolean startsWithCodeOrDirective = false;
            Constants.Operation operation = Constants.Operation.operationStartingOnLine(rest);
            int pos = rest.indexOf(JETConstants.SpecialBlockStart);
            
            if (operation == Constants.Operation.Code || operation == Constants.Operation.Directive) {
                startsWithCodeOrDirective = containsOnlySpaces(rest.substring(0, pos));
            }
            
            if (startsWithCodeOrDirective) {
                rest = rest.substring(pos);
            } else {
                elements.add(new BasicElement(Constants.NewLine));
            }
        }


        // PreviousOp is currently just used by pure text
        Constants.Operation previousOp = Constants.Operation.None;
        
        ExpressionBlockParser expressionParser = new ExpressionBlockParser();
        DirectiveBlockParser directiveParser = new DirectiveBlockParser();
        CodeBlockParser codeParser = new CodeBlockParser();
        PureTextBlockParser pureTextParser = new PureTextBlockParser();
        
        // Rest is what was left of the previous line after the end of the previous operation
        while (rest != null) {
            Constants.Operation currentOp = Constants.Operation.getStartingOperation(rest);
            Pair<String, TemplateElement> parsedPair;
            switch (currentOp) {
                case Expression:
                    parsedPair = expressionParser.translate(bufferedReader, rest, previousOp);
                    break;
                    
                case Directive:
                    parsedPair = directiveParser.translate(bufferedReader, rest, previousOp);
                    break;
                    
                case Code:
                    parsedPair = codeParser.translate(bufferedReader, rest, previousOp);
                    break;
                
                // PureText
                default:
                    parsedPair = pureTextParser.translate(bufferedReader, rest, previousOp);
                    break;
            }
            
            previousOp = currentOp;
            rest = parsedPair.getKey();
            elements.add(parsedPair.getValue());
        }
        
        allDependencies = directiveParser.getAllDependencies();
        
        for (String unhandledDirective : directiveParser.getAllUnhandledDirectives()) {
            printWarning("Warning, the directive " + unhandledDirective + " is not currently handled");
        }
        
        if (pureTextParser.getTemplateContainsTabs()) {
            printWarning("Contains tabs, which will be converted to 4 spaces");
        }
        
        return true;
    }
    
    private boolean containsOnlySpaces(String line) {
        for (int i = 0; i < line.length(); ++i) {
            if (line.charAt(i) != ' ') {
                return false;
            }
        }
        
        return true;
    }
    
    private void printWarning(String warningText) {
        System.out.println("Warning for " + templateName + ": " + warningText);
    }
}
