namespace cruise.umple.fromjet;

// Basic templates
class Constants {
    // Expression, Directive, Code are self-explanatory
    // Text (or PureText) is everything not contained in one of the other operations
    public enum Operation {
        Expression, Directive, Code, Text, None;
        
        // Should be used to check what specific operation is started on the line.
        // Isn't very smart, won't work if an operation is continuing
        public static Operation operationStartingOnLine(String line) {
            int indexOfStart = line.indexOf(JETConstants.SpecialBlockStart);
            if (indexOfStart != -1) {
                return getStartingOperation(line.substring(indexOfStart));
            }
            
            return Operation.Text;
        }
        
        // Will determine which operation is starting at the beginning of the given line
        public static Operation getStartingOperation(String line) {
            if (line.startsWith(JETConstants.ExpressionStart)) {
                return Operation.Expression;
            } else if (line.startsWith(JETConstants.DirectiveStart)) {
                return Operation.Directive;
            } else if (line.startsWith(JETConstants.CodeStart)) {
                return Operation.Code;
            } else {
                return Operation.Text;
            }
        }
    };
    
    const String NewLine = System.getProperties().getProperty("line.separator");
    
    public static final String[] FunctionEnders = {"}", "end"};
}


// These are all constants for parsing the JET templates
class JETConstants {
    const String SpecialBlockStart = "<%";
    const String SpecialBlockEnd = "%>";


    const String DirectiveStart = SpecialBlockStart + "@";
    const String DirectiveEnd = SpecialBlockEnd;
    const String DirectiveInclude = "include";
    
    const String ExpressionStart = SpecialBlockStart + "=";
    const String ExpressionEnd = SpecialBlockEnd;

    const String CodeStart = SpecialBlockStart;
    const String CodeEnd = SpecialBlockEnd;
    
    const String PureTextEnd = SpecialBlockStart;
    
    
    const String StringBufferName = "stringBuffer";
    
}

// These are all constants for creating the Umple templates
class UmpleTemplateConstants {
    const String SpecialBlockStart = "<<";
    const String SpecialBlockEnd = ">>";
    
    const String TemplateStart = SpecialBlockStart + "!";
    const String TemplateEnd = "!" + SpecialBlockEnd;
    
    const String ExpressionStart = SpecialBlockStart + "=";
    const String ExpressionEnd = SpecialBlockEnd;

    const String CodeStart = SpecialBlockStart + "#";
    const String CodeEnd = "#" + SpecialBlockEnd;

    const String IncludeStart = SpecialBlockStart + "@";
    const String IncludeEnd = SpecialBlockEnd;
    
    const String CommentBlockStart = SpecialBlockStart + "/*";
    const String CommentBlockEnd = "*/" + SpecialBlockEnd;
    
    const String PureTextEnd = SpecialBlockStart;
    

    const String StringBufferName = "realSb";
}